{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useThumbOverlap = exports.assertUnreachable = exports.voidFn = exports.getTrackBackground = exports.replaceAt = exports.schd = exports.translate = exports.getClosestThumbIndex = exports.translateThumbs = exports.getPaddingAndBorder = exports.getMargin = exports.checkInitialOverlap = exports.checkValuesAgainstBoundaries = exports.checkBoundaries = exports.isVertical = exports.relativeValue = exports.normalizeValue = exports.isStepDivisible = exports.isTouchEvent = exports.getStepDecimals = void 0;\n\nvar react_1 = require(\"react\");\n\nvar types_1 = require(\"./types\");\n\nvar getStepDecimals = function getStepDecimals(step) {\n  var decimals = step.toString().split('.')[1];\n  return decimals ? decimals.length : 0;\n};\n\nexports.getStepDecimals = getStepDecimals;\n\nfunction isTouchEvent(event) {\n  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n}\n\nexports.isTouchEvent = isTouchEvent;\n\nfunction isStepDivisible(min, max, step) {\n  var res = (max - min) / step;\n  var precision = 8;\n  var roundedRes = Number(res.toFixed(precision));\n  return parseInt(roundedRes.toString(), 10) === roundedRes;\n}\n\nexports.isStepDivisible = isStepDivisible;\n\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n  var BIG_NUM = 10e10;\n  value = Math.round(value * BIG_NUM) / BIG_NUM;\n\n  if (!allowOverlap) {\n    var prev = values[index - 1];\n    var next = values[index + 1];\n    if (prev && prev > value) return prev;\n    if (next && next < value) return next;\n  }\n\n  if (value > max) return max;\n  if (value < min) return min; // `remainder` is a difference between the given value and a full step value\n  // that is closest lower to the given value and is in the range between the min value\n  // and the given value\n\n  var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) % Math.floor(step * BIG_NUM);\n  var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n  var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM; // Values with a remainder `< step/2` are rounded to the closest lower value\n  // while values with a remainder `= > step/2` are rounded to the closest bigger value\n\n  var res = Math.abs(remainder / BIG_NUM) < step / 2 ? rounded : rounded + step;\n  var decimalPlaces = (0, exports.getStepDecimals)(step);\n  return parseFloat(res.toFixed(decimalPlaces));\n}\n\nexports.normalizeValue = normalizeValue;\n\nfunction relativeValue(value, min, max) {\n  return (value - min) / (max - min);\n}\n\nexports.relativeValue = relativeValue;\n\nfunction isVertical(direction) {\n  return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\n\nexports.isVertical = isVertical;\n\nfunction checkBoundaries(value, min, max) {\n  if (min >= max) {\n    throw new RangeError(\"min (\".concat(min, \") is equal/bigger than max (\").concat(max, \")\"));\n  }\n\n  if (value < min) {\n    throw new RangeError(\"value (\".concat(value, \") is smaller than min (\").concat(min, \")\"));\n  }\n\n  if (value > max) {\n    throw new RangeError(\"value (\".concat(value, \") is bigger than max (\").concat(max, \")\"));\n  }\n}\n\nexports.checkBoundaries = checkBoundaries;\n\nfunction checkValuesAgainstBoundaries(value, min, max) {\n  if (value < min) {\n    // set selectedValue to min\n    return min;\n  }\n\n  if (value > max) {\n    // set selectedValue to max\n    return max;\n  } else {\n    return value;\n  }\n}\n\nexports.checkValuesAgainstBoundaries = checkValuesAgainstBoundaries;\n\nfunction checkInitialOverlap(values) {\n  if (values.length < 2) return;\n\n  if (!values.slice(1).every(function (item, i) {\n    return values[i] <= item;\n  })) {\n    throw new RangeError(\"values={[\".concat(values, \"]} needs to be sorted when allowOverlap={false}\"));\n  }\n}\n\nexports.checkInitialOverlap = checkInitialOverlap;\n\nfunction getMargin(element) {\n  var style = window.getComputedStyle(element);\n  return {\n    top: parseInt(style['margin-top'], 10),\n    bottom: parseInt(style['margin-bottom'], 10),\n    left: parseInt(style['margin-left'], 10),\n    right: parseInt(style['margin-right'], 10)\n  };\n}\n\nexports.getMargin = getMargin;\n\nfunction getPaddingAndBorder(element) {\n  var style = window.getComputedStyle(element);\n  return {\n    top: parseInt(style['padding-top'], 10) + parseInt(style['border-top-width'], 10),\n    bottom: parseInt(style['padding-bottom'], 10) + parseInt(style['border-bottom-width'], 10),\n    left: parseInt(style['padding-left'], 10) + parseInt(style['border-left-width'], 10),\n    right: parseInt(style['padding-right'], 10) + parseInt(style['border-right-width'], 10)\n  };\n}\n\nexports.getPaddingAndBorder = getPaddingAndBorder;\n\nfunction translateThumbs(elements, offsets, rtl) {\n  var inverter = rtl ? -1 : 1;\n  elements.forEach(function (element, index) {\n    return translate(element, inverter * offsets[index].x, offsets[index].y);\n  });\n}\n\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\n\nfunction getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n  var thumbIndex = 0;\n  var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n\n  for (var i = 1; i < thumbs.length; i++) {\n    var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n\n    if (thumbDistance < minThumbDistance) {\n      minThumbDistance = thumbDistance;\n      thumbIndex = i;\n    }\n  }\n\n  return thumbIndex;\n}\n\nexports.getClosestThumbIndex = getClosestThumbIndex;\n\nfunction translate(element, x, y) {\n  element.style.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n}\n\nexports.translate = translate; // adapted from https://github.com/alexreardon/raf-schd\n\nvar schd = function schd(fn) {\n  var lastArgs = [];\n  var frameId = null;\n\n  var wrapperFn = function wrapperFn() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    lastArgs = args;\n\n    if (frameId) {\n      return;\n    }\n\n    frameId = requestAnimationFrame(function () {\n      frameId = null;\n      fn.apply(void 0, lastArgs);\n    });\n  };\n\n  return wrapperFn;\n};\n\nexports.schd = schd;\n\nfunction replaceAt(values, index, value) {\n  var ret = values.slice(0);\n  ret[index] = value;\n  return ret;\n}\n\nexports.replaceAt = replaceAt;\n\nfunction getTrackBackground(_a) {\n  var values = _a.values,\n      colors = _a.colors,\n      min = _a.min,\n      max = _a.max,\n      _b = _a.direction,\n      direction = _b === void 0 ? types_1.Direction.Right : _b,\n      _c = _a.rtl,\n      rtl = _c === void 0 ? false : _c;\n\n  if (rtl && direction === types_1.Direction.Right) {\n    direction = types_1.Direction.Left;\n  } else if (rtl && types_1.Direction.Left) {\n    direction = types_1.Direction.Right;\n  } // sort values ascending\n\n\n  var progress = values.slice(0).sort(function (a, b) {\n    return a - b;\n  }).map(function (value) {\n    return (value - min) / (max - min) * 100;\n  });\n  var middle = progress.reduce(function (acc, point, index) {\n    return \"\".concat(acc, \", \").concat(colors[index], \" \").concat(point, \"%, \").concat(colors[index + 1], \" \").concat(point, \"%\");\n  }, '');\n  return \"linear-gradient(\".concat(direction, \", \").concat(colors[0], \" 0%\").concat(middle, \", \").concat(colors[colors.length - 1], \" 100%)\");\n}\n\nexports.getTrackBackground = getTrackBackground;\n\nfunction voidFn() {}\n\nexports.voidFn = voidFn;\n\nfunction assertUnreachable(x) {\n  throw new Error(\"Didn't expect to get here\");\n}\n\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */\n\nvar getThumbWidth = function getThumbWidth(thumbEl, value, separator, decimalPlaces, valueToLabel) {\n  if (valueToLabel === void 0) {\n    valueToLabel = function valueToLabel(value) {\n      return value;\n    };\n  }\n\n  var width = Math.ceil(__spreadArray([thumbEl], Array.from(thumbEl.children), true).reduce(function (width, el) {\n    var elWidth = Math.ceil(el.getBoundingClientRect().width);\n    /**\n     * If a label contains a merged label value, it won't return the true\n     * label width for that Thumb. Clone the label and change the value\n     * to that individual Thumb value in order to grab the true width.\n     */\n\n    if (el.innerText && el.innerText.includes(separator) && el.childElementCount === 0) {\n      var elClone = el.cloneNode(true);\n      elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n      elClone.style.visibility = 'hidden';\n      document.body.appendChild(elClone);\n      elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n      document.body.removeChild(elClone);\n    }\n\n    return elWidth > width ? elWidth : width;\n  }, thumbEl.getBoundingClientRect().width));\n  return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */\n\n\nvar getOverlaps = function getOverlaps(index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n  if (valueToLabel === void 0) {\n    valueToLabel = function valueToLabel(value) {\n      return value;\n    };\n  }\n\n  var overlaps = [];\n  /**\n   * Recursive function for building the overlaps Array\n   * If an overlap is found, find the overlaps for that overlap\n   * @param thumbIndex current Thumb index to find overlaps from\n   */\n\n  var buildOverlaps = function buildOverlaps(thumbIndex) {\n    var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n    var thumbX = offsets[thumbIndex].x;\n    /**\n     * Iterate through the Thumb offsets, if there is a match\n     * add the thumbIndex and siblingIndex to the overlaps Array\n     *\n     * Then build overlaps from the overlapping siblingIndex\n     */\n\n    offsets.forEach(function (_a, siblingIndex) {\n      var siblingX = _a.x;\n      var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n\n      if (thumbIndex !== siblingIndex && (thumbX >= siblingX && thumbX <= siblingX + siblingWidth || thumbX + thumbXWidth >= siblingX && thumbX + thumbXWidth <= siblingX + siblingWidth)) {\n        if (!overlaps.includes(siblingIndex)) {\n          overlaps.push(thumbIndex);\n          overlaps.push(siblingIndex);\n          overlaps = __spreadArray(__spreadArray([], overlaps, true), [thumbIndex, siblingIndex], false);\n          buildOverlaps(siblingIndex);\n        }\n      }\n    });\n  };\n\n  buildOverlaps(index); // Sort and remove duplicates from the built overlaps\n\n  return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */\n\n\nvar useThumbOverlap = function useThumbOverlap(rangeRef, values, index, step, separator, valueToLabel) {\n  if (step === void 0) {\n    step = 0.1;\n  }\n\n  if (separator === void 0) {\n    separator = ' - ';\n  }\n\n  if (valueToLabel === void 0) {\n    valueToLabel = function valueToLabel(value) {\n      return value;\n    };\n  }\n\n  var decimalPlaces = (0, exports.getStepDecimals)(step); // Create initial label style and value. Label value defaults to thumb value\n\n  var _a = (0, react_1.useState)({}),\n      labelStyle = _a[0],\n      setLabelStyle = _a[1];\n\n  var _b = (0, react_1.useState)(valueToLabel(values[index].toFixed(decimalPlaces))),\n      labelValue = _b[0],\n      setLabelValue = _b[1]; // When the rangeRef or values change, update the Thumb label values and styling\n\n\n  (0, react_1.useEffect)(function () {\n    if (rangeRef) {\n      var thumbs = rangeRef.getThumbs();\n      if (thumbs.length < 1) return;\n      var newStyle = {};\n      var offsets_1 = rangeRef.getOffsets();\n      /**\n       * Get any overlaps for the given Thumb index. This must return all linked\n       * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n       * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n       * 2, 3 and 4 also.\n       */\n\n      var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel); // Set a default label value of the Thumb value\n\n      var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n      /**\n       * If there are overlaps for the Thumb, we need to calculate the correct\n       * Label value along with the relevant styling. We only want to show a Label\n       * for the left most Thumb in an overlapping set.\n       * All other Thumbs will be set to display: none.\n       */\n\n      if (overlaps.length) {\n        /**\n         * Get an Array of the offsets for the overlapping Thumbs\n         * This is so we can determine if the Thumb we are looking at\n         * is the left most thumb in an overlapping set\n         */\n        var offsetsX = overlaps.reduce(function (a, c, i, s) {\n          return a.length ? __spreadArray(__spreadArray([], a, true), [offsets_1[s[i]].x], false) : [offsets_1[s[i]].x];\n        }, []);\n        /**\n         * If our Thumb is the left most Thumb, we can build a Label value\n         * and set the style for that Label\n         */\n\n        if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n          /**\n           * First calculate the Label value. To do this,\n           * grab all the values for the Thumbs in our overlaps.\n           * Then convert that to a Set and sort it whilst removing duplicates.\n           */\n          var labelValues_1 = [];\n          overlaps.forEach(function (thumb) {\n            labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n          });\n          /**\n           *  Update the labelValue with the resulting Array\n           *  joined by our defined separator\n           */\n\n          labelValue_1 = Array.from(new Set(labelValues_1.sort(function (a, b) {\n            return parseFloat(a) - parseFloat(b);\n          }))).map(valueToLabel).join(separator);\n          /**\n           * Lastly, build the label styling. The label styling will\n           * position the label and apply a transform so that it's centered.\n           * We want the center point between the left edge of the left most Thumb\n           * and the right edge of the right most Thumb.\n           */\n\n          var first = Math.min.apply(Math, offsetsX);\n          var last = Math.max.apply(Math, offsetsX);\n          var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n          newStyle.left = \"\".concat(Math.abs(first - (last + lastWidth)) / 2, \"px\");\n          newStyle.transform = 'translate(-50%, 0)';\n        } else {\n          // If the Thumb isn't the left most Thumb, hide the Label!\n          newStyle.visibility = 'hidden';\n        }\n      } // Update the label value and style\n\n\n      setLabelValue(labelValue_1);\n      setLabelStyle(newStyle);\n    }\n  }, [rangeRef, values]);\n  return [labelValue, labelStyle];\n};\n\nexports.useThumbOverlap = useThumbOverlap;\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\n\nfunction getThumbDistance(thumbEl, clientX, clientY, direction) {\n  var _a = thumbEl.getBoundingClientRect(),\n      left = _a.left,\n      top = _a.top,\n      width = _a.width,\n      height = _a.height;\n\n  return isVertical(direction) ? Math.abs(clientY - (top + height / 2)) : Math.abs(clientX - (left + width / 2));\n}","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Object","defineProperty","exports","value","useThumbOverlap","assertUnreachable","voidFn","getTrackBackground","replaceAt","schd","translate","getClosestThumbIndex","translateThumbs","getPaddingAndBorder","getMargin","checkInitialOverlap","checkValuesAgainstBoundaries","checkBoundaries","isVertical","relativeValue","normalizeValue","isStepDivisible","isTouchEvent","getStepDecimals","react_1","require","types_1","step","decimals","toString","split","event","touches","changedTouches","min","max","res","precision","roundedRes","Number","toFixed","parseInt","index","allowOverlap","values","BIG_NUM","Math","round","prev","next","remainder","floor","closestLowerNum","abs","rounded","decimalPlaces","parseFloat","direction","Direction","Up","Down","RangeError","every","item","element","style","window","getComputedStyle","top","bottom","left","right","elements","offsets","rtl","inverter","forEach","x","y","thumbs","clientX","clientY","thumbIndex","minThumbDistance","getThumbDistance","thumbDistance","transform","fn","lastArgs","frameId","wrapperFn","args","_i","requestAnimationFrame","apply","ret","_a","colors","_b","Right","_c","Left","progress","sort","a","b","map","middle","reduce","acc","point","Error","getThumbWidth","thumbEl","separator","valueToLabel","width","ceil","children","el","elWidth","getBoundingClientRect","innerText","includes","childElementCount","elClone","cloneNode","innerHTML","visibility","document","body","appendChild","removeChild","getOverlaps","overlaps","buildOverlaps","thumbXWidth","thumbX","siblingIndex","siblingX","siblingWidth","push","Set","rangeRef","useState","labelStyle","setLabelStyle","labelValue","setLabelValue","useEffect","getThumbs","newStyle","offsets_1","getOffsets","labelValue_1","offsetsX","c","s","labelValues_1","thumb","join","first","last","lastWidth","indexOf","height"],"sources":["C:/Users/PRO/Documents/React/ecosystem-simulator/node_modules/react-range/lib/utils.js"],"sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useThumbOverlap = exports.assertUnreachable = exports.voidFn = exports.getTrackBackground = exports.replaceAt = exports.schd = exports.translate = exports.getClosestThumbIndex = exports.translateThumbs = exports.getPaddingAndBorder = exports.getMargin = exports.checkInitialOverlap = exports.checkValuesAgainstBoundaries = exports.checkBoundaries = exports.isVertical = exports.relativeValue = exports.normalizeValue = exports.isStepDivisible = exports.isTouchEvent = exports.getStepDecimals = void 0;\nvar react_1 = require(\"react\");\nvar types_1 = require(\"./types\");\nvar getStepDecimals = function (step) {\n    var decimals = step.toString().split('.')[1];\n    return decimals ? decimals.length : 0;\n};\nexports.getStepDecimals = getStepDecimals;\nfunction isTouchEvent(event) {\n    return ((event.touches && event.touches.length) ||\n        (event.changedTouches && event.changedTouches.length));\n}\nexports.isTouchEvent = isTouchEvent;\nfunction isStepDivisible(min, max, step) {\n    var res = (max - min) / step;\n    var precision = 8;\n    var roundedRes = Number(res.toFixed(precision));\n    return parseInt(roundedRes.toString(), 10) === roundedRes;\n}\nexports.isStepDivisible = isStepDivisible;\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n    var BIG_NUM = 10e10;\n    value = Math.round(value * BIG_NUM) / BIG_NUM;\n    if (!allowOverlap) {\n        var prev = values[index - 1];\n        var next = values[index + 1];\n        if (prev && prev > value)\n            return prev;\n        if (next && next < value)\n            return next;\n    }\n    if (value > max)\n        return max;\n    if (value < min)\n        return min;\n    // `remainder` is a difference between the given value and a full step value\n    // that is closest lower to the given value and is in the range between the min value\n    // and the given value\n    var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) %\n        Math.floor(step * BIG_NUM);\n    var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n    var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM;\n    // Values with a remainder `< step/2` are rounded to the closest lower value\n    // while values with a remainder `= > step/2` are rounded to the closest bigger value\n    var res = Math.abs(remainder / BIG_NUM) < step / 2\n        ? rounded\n        : rounded + step;\n    var decimalPlaces = (0, exports.getStepDecimals)(step);\n    return parseFloat(res.toFixed(decimalPlaces));\n}\nexports.normalizeValue = normalizeValue;\nfunction relativeValue(value, min, max) {\n    return (value - min) / (max - min);\n}\nexports.relativeValue = relativeValue;\nfunction isVertical(direction) {\n    return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\nexports.isVertical = isVertical;\nfunction checkBoundaries(value, min, max) {\n    if (min >= max) {\n        throw new RangeError(\"min (\".concat(min, \") is equal/bigger than max (\").concat(max, \")\"));\n    }\n    if (value < min) {\n        throw new RangeError(\"value (\".concat(value, \") is smaller than min (\").concat(min, \")\"));\n    }\n    if (value > max) {\n        throw new RangeError(\"value (\".concat(value, \") is bigger than max (\").concat(max, \")\"));\n    }\n}\nexports.checkBoundaries = checkBoundaries;\nfunction checkValuesAgainstBoundaries(value, min, max) {\n    if (value < min) {\n        // set selectedValue to min\n        return min;\n    }\n    if (value > max) {\n        // set selectedValue to max\n        return max;\n    }\n    else {\n        return value;\n    }\n}\nexports.checkValuesAgainstBoundaries = checkValuesAgainstBoundaries;\nfunction checkInitialOverlap(values) {\n    if (values.length < 2)\n        return;\n    if (!values.slice(1).every(function (item, i) { return values[i] <= item; })) {\n        throw new RangeError(\"values={[\".concat(values, \"]} needs to be sorted when allowOverlap={false}\"));\n    }\n}\nexports.checkInitialOverlap = checkInitialOverlap;\nfunction getMargin(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style['margin-top'], 10),\n        bottom: parseInt(style['margin-bottom'], 10),\n        left: parseInt(style['margin-left'], 10),\n        right: parseInt(style['margin-right'], 10)\n    };\n}\nexports.getMargin = getMargin;\nfunction getPaddingAndBorder(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style['padding-top'], 10) + parseInt(style['border-top-width'], 10),\n        bottom: parseInt(style['padding-bottom'], 10) + parseInt(style['border-bottom-width'], 10),\n        left: parseInt(style['padding-left'], 10) + parseInt(style['border-left-width'], 10),\n        right: parseInt(style['padding-right'], 10) + parseInt(style['border-right-width'], 10),\n    };\n}\nexports.getPaddingAndBorder = getPaddingAndBorder;\nfunction translateThumbs(elements, offsets, rtl) {\n    var inverter = rtl ? -1 : 1;\n    elements.forEach(function (element, index) {\n        return translate(element, inverter * offsets[index].x, offsets[index].y);\n    });\n}\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n    var thumbIndex = 0;\n    var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n    for (var i = 1; i < thumbs.length; i++) {\n        var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n        if (thumbDistance < minThumbDistance) {\n            minThumbDistance = thumbDistance;\n            thumbIndex = i;\n        }\n    }\n    return thumbIndex;\n}\nexports.getClosestThumbIndex = getClosestThumbIndex;\nfunction translate(element, x, y) {\n    element.style.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n}\nexports.translate = translate;\n// adapted from https://github.com/alexreardon/raf-schd\nvar schd = function (fn) {\n    var lastArgs = [];\n    var frameId = null;\n    var wrapperFn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        lastArgs = args;\n        if (frameId) {\n            return;\n        }\n        frameId = requestAnimationFrame(function () {\n            frameId = null;\n            fn.apply(void 0, lastArgs);\n        });\n    };\n    return wrapperFn;\n};\nexports.schd = schd;\nfunction replaceAt(values, index, value) {\n    var ret = values.slice(0);\n    ret[index] = value;\n    return ret;\n}\nexports.replaceAt = replaceAt;\nfunction getTrackBackground(_a) {\n    var values = _a.values, colors = _a.colors, min = _a.min, max = _a.max, _b = _a.direction, direction = _b === void 0 ? types_1.Direction.Right : _b, _c = _a.rtl, rtl = _c === void 0 ? false : _c;\n    if (rtl && direction === types_1.Direction.Right) {\n        direction = types_1.Direction.Left;\n    }\n    else if (rtl && types_1.Direction.Left) {\n        direction = types_1.Direction.Right;\n    }\n    // sort values ascending\n    var progress = values.slice(0).sort(function (a, b) { return a - b; }).map(function (value) { return ((value - min) / (max - min)) * 100; });\n    var middle = progress.reduce(function (acc, point, index) {\n        return \"\".concat(acc, \", \").concat(colors[index], \" \").concat(point, \"%, \").concat(colors[index + 1], \" \").concat(point, \"%\");\n    }, '');\n    return \"linear-gradient(\".concat(direction, \", \").concat(colors[0], \" 0%\").concat(middle, \", \").concat(colors[colors.length - 1], \" 100%)\");\n}\nexports.getTrackBackground = getTrackBackground;\nfunction voidFn() { }\nexports.voidFn = voidFn;\nfunction assertUnreachable(x) {\n    throw new Error(\"Didn't expect to get here\");\n}\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */\nvar getThumbWidth = function (thumbEl, value, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var width = Math.ceil(__spreadArray([thumbEl], Array.from(thumbEl.children), true).reduce(function (width, el) {\n        var elWidth = Math.ceil(el.getBoundingClientRect().width);\n        /**\n         * If a label contains a merged label value, it won't return the true\n         * label width for that Thumb. Clone the label and change the value\n         * to that individual Thumb value in order to grab the true width.\n         */\n        if (el.innerText &&\n            el.innerText.includes(separator) &&\n            el.childElementCount === 0) {\n            var elClone = el.cloneNode(true);\n            elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n            elClone.style.visibility = 'hidden';\n            document.body.appendChild(elClone);\n            elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n            document.body.removeChild(elClone);\n        }\n        return elWidth > width ? elWidth : width;\n    }, thumbEl.getBoundingClientRect().width));\n    return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */\nvar getOverlaps = function (index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var overlaps = [];\n    /**\n     * Recursive function for building the overlaps Array\n     * If an overlap is found, find the overlaps for that overlap\n     * @param thumbIndex current Thumb index to find overlaps from\n     */\n    var buildOverlaps = function (thumbIndex) {\n        var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n        var thumbX = offsets[thumbIndex].x;\n        /**\n         * Iterate through the Thumb offsets, if there is a match\n         * add the thumbIndex and siblingIndex to the overlaps Array\n         *\n         * Then build overlaps from the overlapping siblingIndex\n         */\n        offsets.forEach(function (_a, siblingIndex) {\n            var siblingX = _a.x;\n            var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n            if (thumbIndex !== siblingIndex &&\n                ((thumbX >= siblingX && thumbX <= siblingX + siblingWidth) ||\n                    (thumbX + thumbXWidth >= siblingX &&\n                        thumbX + thumbXWidth <= siblingX + siblingWidth))) {\n                if (!overlaps.includes(siblingIndex)) {\n                    overlaps.push(thumbIndex);\n                    overlaps.push(siblingIndex);\n                    overlaps = __spreadArray(__spreadArray([], overlaps, true), [thumbIndex, siblingIndex], false);\n                    buildOverlaps(siblingIndex);\n                }\n            }\n        });\n    };\n    buildOverlaps(index);\n    // Sort and remove duplicates from the built overlaps\n    return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */\nvar useThumbOverlap = function (rangeRef, values, index, step, separator, valueToLabel) {\n    if (step === void 0) { step = 0.1; }\n    if (separator === void 0) { separator = ' - '; }\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var decimalPlaces = (0, exports.getStepDecimals)(step);\n    // Create initial label style and value. Label value defaults to thumb value\n    var _a = (0, react_1.useState)({}), labelStyle = _a[0], setLabelStyle = _a[1];\n    var _b = (0, react_1.useState)(valueToLabel(values[index].toFixed(decimalPlaces))), labelValue = _b[0], setLabelValue = _b[1];\n    // When the rangeRef or values change, update the Thumb label values and styling\n    (0, react_1.useEffect)(function () {\n        if (rangeRef) {\n            var thumbs = rangeRef.getThumbs();\n            if (thumbs.length < 1)\n                return;\n            var newStyle = {};\n            var offsets_1 = rangeRef.getOffsets();\n            /**\n             * Get any overlaps for the given Thumb index. This must return all linked\n             * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n             * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n             * 2, 3 and 4 also.\n             */\n            var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel);\n            // Set a default label value of the Thumb value\n            var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n            /**\n             * If there are overlaps for the Thumb, we need to calculate the correct\n             * Label value along with the relevant styling. We only want to show a Label\n             * for the left most Thumb in an overlapping set.\n             * All other Thumbs will be set to display: none.\n             */\n            if (overlaps.length) {\n                /**\n                 * Get an Array of the offsets for the overlapping Thumbs\n                 * This is so we can determine if the Thumb we are looking at\n                 * is the left most thumb in an overlapping set\n                 */\n                var offsetsX = overlaps.reduce(function (a, c, i, s) {\n                    return a.length ? __spreadArray(__spreadArray([], a, true), [offsets_1[s[i]].x], false) : [offsets_1[s[i]].x];\n                }, []);\n                /**\n                 * If our Thumb is the left most Thumb, we can build a Label value\n                 * and set the style for that Label\n                 */\n                if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n                    /**\n                     * First calculate the Label value. To do this,\n                     * grab all the values for the Thumbs in our overlaps.\n                     * Then convert that to a Set and sort it whilst removing duplicates.\n                     */\n                    var labelValues_1 = [];\n                    overlaps.forEach(function (thumb) {\n                        labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n                    });\n                    /**\n                     *  Update the labelValue with the resulting Array\n                     *  joined by our defined separator\n                     */\n                    labelValue_1 = Array.from(new Set(labelValues_1.sort(function (a, b) { return parseFloat(a) - parseFloat(b); })))\n                        .map(valueToLabel)\n                        .join(separator);\n                    /**\n                     * Lastly, build the label styling. The label styling will\n                     * position the label and apply a transform so that it's centered.\n                     * We want the center point between the left edge of the left most Thumb\n                     * and the right edge of the right most Thumb.\n                     */\n                    var first = Math.min.apply(Math, offsetsX);\n                    var last = Math.max.apply(Math, offsetsX);\n                    var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n                    newStyle.left = \"\".concat(Math.abs(first - (last + lastWidth)) / 2, \"px\");\n                    newStyle.transform = 'translate(-50%, 0)';\n                }\n                else {\n                    // If the Thumb isn't the left most Thumb, hide the Label!\n                    newStyle.visibility = 'hidden';\n                }\n            }\n            // Update the label value and style\n            setLabelValue(labelValue_1);\n            setLabelStyle(newStyle);\n        }\n    }, [rangeRef, values]);\n    return [labelValue, labelStyle];\n};\nexports.useThumbOverlap = useThumbOverlap;\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getThumbDistance(thumbEl, clientX, clientY, direction) {\n    var _a = thumbEl.getBoundingClientRect(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;\n    return isVertical(direction) ? Math.abs(clientY - (top + height / 2)) : Math.abs(clientX - (left + width / 2));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}